# Datos de estudio

Se utilizaras los siguientes tipos de datos (se especifica con 𐄂 "datos listos para usar" y 𐄂 "datos incompletos o en procesamiento"):

<ul style="list-style-type: none">
    <li>𐄂 Registros independientes</li>
    <ul style="list-style-type: none">
      <li>Faltan datos de áreas protegidas y de cámaras</li>
    </ul>
    <li>𐄂 Datos de cada camara trampa</li>
    <ul style="list-style-type: none">
      <li>Longitud, Latitud, Modelo</li>
    </ul>
    <li>𐄂 Clima</li>
    <ul style="list-style-type: none">
      <li>Precipitaciones</li>
      <li>Temperatura</li>
      <li>Nubosidad</li>
    </ul>
    <li>𐄂 Tasa de registro de:</li>
    <ul style="list-style-type: none">
      <li>Vacas</li>
      <li>Perros</li>
    </ul>
</ul>


## Registros independientes

Se utilizan los datos obtenidos de ...

```{r}
load("datos/planilla_general.RData")
```

### Preparación de datos

Se lleva a cabo un proceso de filtrado para retener únicamente los datos relevantes. 

```{r}
datos <- datos %>% 
  filter(type == "Mammal") %>% 
  select(sitio = site, sistema = station, camara = camera, datetime, sp = species)
```

```{r echo=FALSE}
kable(head(datos), booktabs = TRUE)
```

## Tasa de registro

Se calcularán las tasas de registro por cámara para el ganado vacuno y los perros. Para esto se necesita los días que las cámaras estuvieron activas.

## Datos climatológicos

Para esto se probará una base de datos abierta llamada open-meto.com. La misma utiliza "Deutscher Wetter Dienst (DWD), la Administración Nacional Oceánica y Atmosférica (NOAA), Meteo-France y el Centro Meteorológico Canadiense (CMC)". Se utilice esta opción o la INUMET, el procedimiento luego de tener la base de datos será similar.

### Probando open-meteo

```{r}
library("openmeteo")
```

Prueba del paquete y la función `weather_history`:

```{r eval=FALSE}
weather_history(c(-34.666311631255184, -56.217928174121674),
                start = "2020-01-01",
                end = "2020-01-05",
                daily = c("wind_speed_10m_max",
                          "wind_gusts_10m_max",
                          "wind_speed_10m_mean",
                          "precipitation_sum",
                          "precipitation_hours",
                          "temperature_2m_min",
                          "temperature_2m_mean",
                          "temperature_2m_max",
                          "weather_code"),
                response_units = list(
                  temperature_unit = "celsius",
                  windspeed_unit = "kmh",
                  precipitation_unit = "mm"
                ),
                timezone = "America/Montevideo"
)
```
Para ver el significado de "daily_weather_code" se puede acceder [aquí](https://www.nodc.noaa.gov/archive/arc0021/0002199/1.1/data/0-data/HTML/WMO-CODE/WMO4677.HTM).

El siguiente paso es obtener las fechas en que se necesitan los datos climáticos. Para esto se extraen las fechas de los registros:

```{r}
# OBS: Laguna De Rocha tiene dos campañas, se podría separar el sitio como LR_A y LR_B. Ahora se elimina LR.
fechas_con_registro <- datos %>% 
  select(sitio, datetime) %>% 
  mutate(fecha = as_date(datetime)) %>% 
  select(sitio, fecha) %>%
  group_by(sitio) %>%
  summarise(primera_fecha = min(fecha), ultima_fecha = max(fecha)) %>% 
  filter(sitio != "LR")

# Falta latitud y longitud de cada sitio, se agregan en hard coding.
fechas_con_registro <- fechas_con_registro %>% 
  add_column("latitud" = c(-34.37487817037226, -33.93997278713127, -34.776719666347454, -33.966788259313375, -34.78333836597851, -33.710087830803594),
             "longitud" = c(-53.809678593289696, -53.528272451849645, -54.55898221076165, -53.645583740898076, -55.39359956154083, -53.5664228091683))
```

```{r}
kable(fechas_con_registro, booktabs = TRUE)
```

```{r eval=FALSE}
datos_clima <- tibble("sitio" = character(),
                      "date" = as.Date(character()),
                      "daily_wind_speed_10m_max" = double(),
                      "daily_wind_gusts_10m_max" = double(),
                      "daily_wind_speed_10m_mean" = double(),
                      "daily_precipitation_sum" = double(),
                      "daily_precipitation_hours" = double(),
                      "daily_temperature_2m_min" = double(),
                      "daily_temperature_2m_mean" = double(),
                      "daily_temperature_2m_max" = double(),
                      "daily_weather_code" = integer())
for (sitio in 1:nrow(fechas_con_registro)) {
  nombre_sitio <- fechas_con_registro[sitio,]$sitio
  latitud <- fechas_con_registro[sitio,]$latitud
  longitud <- fechas_con_registro[sitio,]$longitud
  primera_fecha <- fechas_con_registro[sitio,]$primera_fecha
  ultima_fecha <- fechas_con_registro[sitio,]$ultima_fecha
  
  datos_clima_sitio <- weather_history(c(latitud, longitud),
                    start = primera_fecha,
                    end = ultima_fecha,
                    daily = c("wind_speed_10m_max",
                              "wind_gusts_10m_max",
                              "wind_speed_10m_mean",
                              "precipitation_sum",
                              "precipitation_hours",
                              "temperature_2m_min",
                              "temperature_2m_mean",
                              "temperature_2m_max",
                              "weather_code"),
                    response_units = list(
                      temperature_unit = "celsius",
                      windspeed_unit = "kmh",
                      precipitation_unit = "mm"
                    ),
                    timezone = "America/Montevideo"
    ) %>% 
    mutate(sitio = nombre_sitio) %>%
    select(sitio, everything())
  
  datos_clima <- datos_clima %>% 
    add_row(datos_clima_sitio)
}

save(datos_clima, file="datos/generados/datos_clima.RData")
```

```{r}
load("datos/generados/datos_clima.RData")
paged_table(datos_clima)
```

¿Qué códigos de clima aparecieron?

```{r}
datos_clima %>% 
  select(daily_weather_code) %>% 
  distinct() %>% 
  arrange(daily_weather_code)
```

Significado:
- 00: Desarrollo de nubes no observado o no observable.
- 01: Nubes disolviéndose o volviéndose menos desarrolladas en general.
- 02: Estado del cielo en general sin cambios.
- 03: Nubes formándose o desarrollándose en general.
- 51: Llovizna, no congelante, continua, ligera en el momento de la observación.
- 53: Llovizna, no congelante, continua, moderada en el momento de la observación.
- 55: Llovizna, no congelante, continua, intensa (densa) en el momento de la observación.
- 61: Lluvia, no congelante, intermitente, ligera en el momento de la observación.
- 63: Lluvia, no congelante, continua, moderada en el momento de la observación.
- 65: Lluvia, no congelante, continua, intensa en el momento de la observación.

### Exploración de datos

Se intentará visualizar los datos de los registros con alguna de estas variables.

```{r}
registros_por_camara_por_especie_por_dia <- datos %>%
  mutate(fecha = as_date(datetime)) %>% 
  group_by(sitio, camara, fecha, sp) %>% 
  summarise(registros = n(), keep())

datos2 <- datos %>% 
  mutate(date = as_date(datetime)) %>% 
  left_join(datos_clima, join_by(sitio, date)) %>% 
  mutate(tiempo_decimal = hour(datetime) + minute(datetime)/60 + second(datetime)/3600) %>% 
  drop_na()
```

Graficos:


```{r}
ggplot(data = datos2) + 
  geom_point(aes(x = sp, y = tiempo_decimal), size = 2, colour = "navy", stroke = 0, alpha = 0.05) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
ggplot(data = datos2) + 
  geom_point(aes(x = sp, y = tiempo_decimal), size = 2, colour = "navy", stroke = 0, alpha = 0.05) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
datos3 <- datos2 %>% 
  filter(sp == "Mgou") %>% 
  drop_na()

ggplot(data = datos3) + 
  geom_point(aes(x = daily_wind_speed_10m_mean, y = daily_precipitation_hours))
```

```{r}
datos4 <- datos2 %>%
  filter(sp %in% c("Aaxi", "Mgou", "Lgym", "Ctho", "Btau", "Cfam", "Lwie", "Lgeo")) %>% 
  mutate(familia = case_when(
    sp %in% c("Aaxi", "Mgou") ~ "Cervidae",
    sp %in% c("Lgym", "Ctho") ~ "Canidae",
    sp %in% c("Lgeo", "Lwie") ~ "Felinae",
    sp %in% c("Btau", "Cfam") ~ "Domestico"
  )) %>% 
  group_by(familia) %>% 
  order(familia)

ggplot(data = datos4) +
  geom_point(aes(x = sp, y = tiempo_decimal), size = 2, stroke = 0, alpha = 0.05) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```


### Origen y utilidad de los datos

De donde vienen los codigos del clima, los datos, etc? es confiable?

